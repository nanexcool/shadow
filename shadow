#!/usr/bin/env node
const request = require('request-promise-native');
const Web3 = require('web3');
const web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'))

let ETH_GAS = process.env.ETH_GAS || 200000;
let ETH_GAS_PRICE = process.env.ETH_GAS_PRICE || web3.toWei(2, 'gwei');

const feedAddress = '0xD0E900C153225517739B0Df07A00DE2E76e263cb';
const medAddress = '0x729D19f657BD0614b4985Cf1D82531c67569197B';
const uri = 'https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD';

let txs = [];

let tx = {
  hash: null,

}

const getGasPrice = () => {
  return web3.toDecimal(web3.eth.gasPrice);
}

const getSpread = (oldV, newV) => {
  if (oldV === 0) {
    return 100;
  }
  return Math.abs((newV - oldV) / oldV * 100);
}

const getFeedPrice = (address) => {
  return new Promise((resolve, reject) => {
    web3.eth.call({
      to: address,
      data: web3.sha3("peek()").substr(0, 10)
    }, (e, r) => {
      if (e) reject(e.toString());
      else {
        let value = r.substr(0, 66);
        resolve(web3.fromWei(value));
      }
    });
  })
}

const getPrice = () => {
  return request({ uri, json: true })
    .then(body => body.USD)
    .catch(err => err.toString());
}

const loop = (web3) => {
  console.log('----------------');
  var x = Promise.all([getFeedPrice(feedAddress), getPrice()]);
  x.then(y => {
    const [oldV, newV] = y;
    const spread = getSpread(oldV, newV);
    console.log(`Old: ${oldV} New: ${newV} Spread: ${spread}`);

    console.log(`Next try in ${60000 / 1000} seconds`);
    setTimeout(() => loop(web3), 60000);
  });
  // getPrice()
  //   .then(x => console.log(x))
  //   .catch(err => console.log(err));
  // getFeedPrice(feedAddress)
  //   .then(x => console.log(x))
  //   .catch(err => console.log(err));
  //const med = '0x729D19f657BD0614b4985Cf1D82531c67569197B';
  // const med = medAddress;
  // web3.eth.call({
  //   to: med, data: web3.sha3("read()").substr(0, 10)
  // }, (e, r) => console.log(web3.fromWei(r)));
}

loop(web3);
setInterval(() => checkTxs(), 1000);

const checkTxs = () => {
  if (txs.length > 0) {
    console.log(`${txs.length} txs in queue`);
    let myTxs = txs.slice();
    myTxs.map((tx, i) => {
      web3.eth.getTransactionReceipt(tx, (e, r) => {
        console.log(`Looking for tx: ${tx}`)
        if (r) {
          txs = [];
          console.log(`Tx mined at block ${r.blockNumber}, used ${r.gasUsed} gas.`);
        }
      });
    });
  }
}
