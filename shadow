#!/usr/bin/env node

const Preferences = require('preferences');
const request = require('request-promise-native');
const Web3 = require('web3');
const web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'))

const prefs = new Preferences('com.makerdao.shadow', {
  eth_from: '0x00DaA9a2D88BEd5a29A6ca93e0B7d860cd1d403F',
  eth_gas: 200000,
  eth_gas_price: web3.toWei(1, 'gwei'),
  spread: 1
});

let ETH_FROM = process.env.ETH_FROM || '0x00DaA9a2D88BEd5a29A6ca93e0B7d860cd1d403F';
let ETH_GAS = process.env.ETH_GAS || 200000;
let ETH_GAS_PRICE = process.env.ETH_GAS_PRICE || web3.toWei(1, 'gwei');
let SPREAD = process.env.SPREAD || .01;

let LOOP_INTERVAL = 20 * 1000; // 20 seconds

const feedAddress = '0xD0E900C153225517739B0Df07A00DE2E76e263cb';
const medAddress = '0x729D19f657BD0614b4985Cf1D82531c67569197B';
const uri = 'https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD';

let txs = [];

let tx = {
  blockNumber: null,
  gasPrice: null,
  gasUsed: null,
  nonce: null,
  time: null,
  transactionHash: null,
}

const dump = (data) => console.log(JSON.stringify(data, null, 2))

const checkNetwork = () => web3.version.network

const getGasPrice = () => web3.toDecimal(web3.eth.gasPrice)

const getNonce = (address) => web3.eth.getTransactionCount(address)

const getSpread = (oldV, newV) => {
  if (oldV === 0) {
    return 100;
  }
  return Math.abs((newV - oldV) / oldV * 100);
}

dump(prefs)

const getFeedPrice = (address) => {
  return new Promise((resolve, reject) => {
    web3.eth.call({
      to: address,
      data: web3.sha3("peek()").substr(0, 10)
    }, (e, r) => {
      if (e) reject(e.toString());
      else {
        let value = r.substr(0, 66);
        resolve(web3.fromWei(value));
      }
    });
  })
}

const getPrice = () => {
  return request({ uri, json: true })
    .then(body => body.USD)
    .catch(err => err.toString());
}

const sendTransaction = () => {
  let data = web3.sha3('post(uint128,uint32,address)').substr(0, 10);
  const transactionObject = {
    data,
    from: ETH_FROM,
    to: feedAddress,
    gas: ETH_GAS,
    gasPrice: ETH_GAS_PRICE,
    nonce: getNonce(ETH_FROM),
  }
  return transactionObject;
  //return web3.eth.sendTransaction(transactionObject);
}

const loop = (web3) => {
  console.log('----------------');
  Promise.all([getFeedPrice(feedAddress), getPrice()])
    .then(res => {
      const [oldV, newV] = res;
      const spread = getSpread(oldV, newV);
      console.log(`Old: ${oldV} New: ${newV} Spread: ${spread}`);

      if (spread > SPREAD) {
        console.log(`Spread larger than ${SPREAD} (${spread})`);
        console.log(`Check if there are previous txs... (${txs.length}) txs`);
        const transactionObject = sendTransaction();
        txs.push(transactionObject);
        dump(transactionObject);
      }
      const nonce = getNonce(ETH_FROM);
      dump(`Nonce: ${nonce}`);
      return Promise.resolve(true);
    })
    .then(x => {
      console.log(`Next try in ${LOOP_INTERVAL / 1000} seconds`);
      setTimeout(() => loop(web3), LOOP_INTERVAL);
    })
    .catch(e => {
      console.log(e.toString());
      console.log(`Next try in ${LOOP_INTERVAL / 1000} seconds`);
      setTimeout(() => loop(web3), LOOP_INTERVAL);
    });
}

loop(web3);
setInterval(() => checkTxs(), 5000);

const checkTxs = () => {
  if (txs.length > 0) {
    console.log(`${txs.length} txs in queue`);
    let myTxs = txs.slice();
    myTxs.map((tx, i) => {
      web3.eth.getTransactionReceipt(tx.transactionHash, (e, r) => {
        console.log(`Looking for tx: ${tx.transactionHash}`)
        if (r) {
          txs = [];
          console.log(`Tx mined at block ${r.blockNumber}, used ${r.gasUsed} gas.`);
        }
      });
    });
  }
}

  //const med = '0x729D19f657BD0614b4985Cf1D82531c67569197B';
  // const med = medAddress;
  // web3.eth.call({
  //   to: med, data: web3.sha3("read()").substr(0, 10)
  // }, (e, r) => console.log(web3.fromWei(r)));
